From 3bbfb541b258baec9eba674b5d8dc30007a61542 Mon Sep 17 00:00:00 2001
From: "Dmitry V. Levin" <ldv@strace.io>
Date: Wed, 21 Jun 2023 08:00:00 +0000
Subject: [PATCH] net: enhance getsockopt decoding

When getsockopt syscall fails the kernel sometimes updates the optlen
argument, for example, NETLINK_LIST_MEMBERSHIPS updates it even if
optval is not writable.

* src/net.c (SYS_FUNC(getsockopt)): Try to fetch and print optlen
argument on exiting syscall regardless of getsockopt exit status.

Maintainer note: This small feature patch is required to apply the
second patch in this series to fix the test failure.

Signed-off-by: Olivia Crain <oliviacrain@microsoft.com>
---
 src/net.c | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/src/net.c b/src/net.c
index f68ccb947..7244b5e57 100644
--- a/src/net.c
+++ b/src/net.c
@@ -1038,7 +1038,7 @@ SYS_FUNC(getsockopt)
 	} else {
 		ulen = get_tcb_priv_ulong(tcp);
 
-		if (syserror(tcp) || umove(tcp, tcp->u_arg[4], &rlen) < 0) {
+		if (umove(tcp, tcp->u_arg[4], &rlen) < 0) {
 			/* optval */
 			printaddr(tcp->u_arg[3]);
 			tprint_arg_next();
@@ -1047,6 +1047,19 @@ SYS_FUNC(getsockopt)
 			tprint_indirect_begin();
 			PRINT_VAL_D(ulen);
 			tprint_indirect_end();
+		} else if (syserror(tcp)) {
+			/* optval */
+			printaddr(tcp->u_arg[3]);
+			tprint_arg_next();
+
+			/* optlen */
+			tprint_indirect_begin();
+			if (ulen != rlen) {
+				PRINT_VAL_D(ulen);
+				tprint_value_changed();
+			}
+			PRINT_VAL_D(rlen);
+			tprint_indirect_end();
 		} else {
 			/* optval */
 			print_getsockopt(tcp, tcp->u_arg[1], tcp->u_arg[2],


From f31c2f4494779e5c5f170ad10539bfc2dfafe967 Mon Sep 17 00:00:00 2001
From: "Dmitry V. Levin" <ldv@strace.io>
Date: Sat, 24 Jun 2023 08:00:00 +0000
Subject: [PATCH] tests: update sockopt-sol_netlink test

Update sockopt-sol_netlink test that started to fail, likely
due to recent linux kernel commit f4e4534850a9 ("net/netlink: fix
NETLINK_LIST_MEMBERSHIPS length report").

* tests/sockopt-sol_netlink.c (main): Always print changing optlen value
on exiting syscall.

Maintainer note: Kernel commit mentioned above was backported to 5.15,
is present in kernel>=5.15.116.1
https://github.com/microsoft/CBL-Mariner-Linux-Kernel/commit/7dc379f8856bd334582c35c7fe28952e8bd8fb5d

Reported-by: Alexander Gordeev <agordeev@linux.ibm.com>
Signed-off-by: Olivia Crain <oliviacrain@microsoft.com>
---
 tests/sockopt-sol_netlink.c | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/tests/sockopt-sol_netlink.c b/tests/sockopt-sol_netlink.c
index 82b98adc23..1c33219ac5 100644
--- a/tests/sockopt-sol_netlink.c
+++ b/tests/sockopt-sol_netlink.c
@@ -94,7 +94,10 @@ main(void)
 			printf("%p", val);
 		else
 			printf("[%d]", *val);
-		printf(", [%d]) = %s\n", *len, errstr);
+		printf(", [%d", (int) sizeof(*val));
+		if ((int) sizeof(*val) != *len)
+			printf(" => %d", *len);
+		printf("]) = %s\n", errstr);
 
 		/* optlen larger than necessary - shortened */
 		*len = sizeof(*val) + 1;
@@ -150,8 +153,12 @@ main(void)
 		/* optval EFAULT - print address */
 		*len = sizeof(*val);
 		get_sockopt(fd, names[i].val, efault, len);
-		printf("getsockopt(%d, SOL_NETLINK, %s, %p, [%d]) = %s\n",
-		       fd, names[i].str, efault, *len, errstr);
+		printf("getsockopt(%d, SOL_NETLINK, %s, %p",
+		       fd, names[i].str, efault);
+		printf(", [%d", (int) sizeof(*val));
+		if ((int) sizeof(*val) != *len)
+			printf(" => %d", *len);
+		printf("]) = %s\n", errstr);
 
 		/* optlen EFAULT - print address */
 		get_sockopt(fd, names[i].val, val, len + 1);
